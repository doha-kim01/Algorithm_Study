# -*- coding: utf-8 -*-
"""backjoon_sy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VIara217zspyMsnoYDcnDzyjTJQet4om
"""

# 1697번
from collections import deque

n, k = map(int, input().split())
visit = [0 for i in range(100001)]
queue = deque()
queue.append([n, 0])

while queue:
    p, d = queue[0][0], queue[0][1]
    if p == k:
        break
    queue.popleft()
    visit[p] = 1
    if p - 1 >= 0 and visit[p - 1] == 0:
        queue.append([p - 1, d + 1])
    if p + 1 <= 100000 and visit[p + 1] == 0:
        queue.append([p + 1, d + 1])
    if p * 2 <= 100000 and visit[p * 2] == 0:
        queue.append([p * 2, d + 1])
        
print(queue[0][1])


# 1191번
n = int(input())
inputs = []

for _ in range(n):
    inputs.append(input().split())

class Node():
    def __init__(self, item, left, right):
        self.item = item
        self.left = left
        self.right = right

def preorder(node):
    print(node.item, end = '')
    if node.left != '.':
        preorder(tree[node.left])
    if node.right != '.':
        preorder(tree[node.right])
        
def inorder(node):
    if node.left != '.':
        inorder(tree[node.left])
    print(node.item, end = '')
    if node.right != '.':
        inorder(tree[node.right])
        
def postorder(node):
    if node.left != '.':
        postorder(tree[node.left])
    if node.right != '.':
        postorder(tree[node.right])
    print(node.item, end = '')

tree = {}
for item, left, right in inputs:
    tree[item] = Node(item, left, right)
preorder(tree['A'])
print()
inorder(tree['A'])
print()
postorder(tree['A'])